{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","OnSearch","class","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","isError","error","errorinfo","this","setState","console","log","Component","App","event","SearchTerm","target","value","robotsList","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbF,SAACC,GAAW,IACjBC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAClB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,cAAcC,IAAG,+BAA0BH,EAA1B,kBAC1B,6BACC,4BAAKF,GACL,2BAAIC,MCEOK,EAPE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACG,6BACAA,EAAOC,KAAI,SAACC,EAAKC,GAAN,OAAY,kBAAC,EAAD,CAAMC,IAAKJ,EAAOG,GAAGR,GAAIA,GAAIK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,aCK9FW,EAVG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,OACK,2BAAOC,MAAM,gBACZC,KAAK,SACLC,YAAY,SACZC,SAAUJ,KCCFK,G,MAPD,SAACnB,GACd,OACC,yBAAKoB,MAAO,CAAEC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC/DvB,EAAMwB,YCqBKC,E,kDAtBd,aAAc,IAAD,8BACZ,gBACKC,MAAQ,CACZC,SAAS,GAHE,E,8DAMKC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,SAAS,IACxBK,QAAQC,IAAIL,K,+BAIX,OAAGE,KAAKJ,MAAMC,QACN,4DAGAG,KAAK9B,MAAMwB,a,GAjBMU,aC6CZC,E,kDArCf,aAAc,IAAD,8BACZ,gBAcDrB,SAAW,SAACsB,GACX,EAAKL,SAAS,CAAEM,WAAYD,EAAME,OAAOC,SAdzC,EAAKb,MAAQ,CACZc,WAAW,GACXH,WAAY,IAJD,E,gEAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAYA,EAASC,UAC1BF,MAAK,SAACG,GAAD,OAAS,EAAKd,SAAS,CAACS,WAAYK,S,+BAQlC,IAAD,OACAC,EAAiBhB,KAAKJ,MAAMc,WAAWO,QAAO,SAACC,GACrD,OAAOA,EAAM/C,KAAKgD,cAAcC,SAAS,EAAKxB,MAAMW,WAAWY,kBAEjE,OACG,yBAAK7C,UAAU,MAChB,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,SAAUgB,KAAKhB,WAC1B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACO,kBAAC,EAAD,CAAUN,OAASsC,W,GA9BZZ,aCClBiB,IAASC,OACN,kBAAC,EAAD,MACDC,SAASC,eAAe,SPuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLI,QAAQJ,MAAMA,EAAMiC,a","file":"static/js/main.692e78cb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\tconst {name,email,id} = props;\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt=\"robofriends\" src={`https://robohash.org/${id}size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\t\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react' ;\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn(\r\n\t  \t<div>\r\n\t\t\t{robots.map((user,i) => <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />)}\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ OnSearch }) => {\r\n\treturn(\r\n\t\t    <input class=\"pa2 black-180\"  \r\n\t\t    \ttype='search' \r\n\t\t    \tplaceholder=\"search\"\r\n\t\t    \tonChange={OnSearch}\r\n\t\t    />\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\nconst Scroll =(props)=>{\r\n\treturn(\r\n\t\t<div style={{ overflowY:'scroll',border:'5px solid black',height:'700px' }}>\r\n\t\t {props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default Scroll;","import React,{ Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tisError: false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error,errorinfo){\r\n\t\tthis.setState({isError: true});\r\n\t\tconsole.log(error);\r\n\r\n\t}\r\n\trender(){\r\n\t\t\tif(this.state.isError){\r\n\t\t\t\treturn <h1>Ooops..you caught us napping</h1>\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn this.props.children\r\n\t\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\nexport default ErrorBoundary","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll'\r\nimport ErrorBoundary from '../Components/ErrorBoundary'\r\n\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobotsList:[],\r\n\t\t\tSearchTerm: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then((response)=>response.json())\r\n\t\t.then((users)=>this.setState({robotsList: users}))\r\n\t}\r\n\r\n\r\n\tOnSearch = (event) => {\r\n\t\tthis.setState({ SearchTerm: event.target.value });\r\n\t}\r\n\r\n\trender(){\r\n\t\t\tconst filteredRobots = this.state.robotsList.filter((robot)=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.SearchTerm.toLowerCase());\r\n\t\t\t})\r\n\treturn(\r\n\t\t  <div className='tc'>\t\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<SearchBox OnSearch={this.OnSearch} />\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\t        \t\t<CardList robots ={filteredRobots}/>\r\n\t\t\t\t</ErrorBoundary>\t\t\t\r\n\t\t\t</Scroll>\t\t  \r\n\t\t  </div>\t\r\n\t\t);\r\n    }\r\n}\r\n\r\nexport  default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App';\n// import { robots } from './robots';\n\n\n\nReactDOM.render(\n  \t<App />,\t\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}